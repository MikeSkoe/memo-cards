// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";

function make(cards) {
  return cards;
}

function addCard(t, card) {
  return {
          hd: card,
          tl: t
        };
}

function updateCard(t, newCard) {
  return Belt_List.map(t, (function (card) {
                if (card.front === newCard.front && card.back === newCard.back) {
                  return newCard;
                } else {
                  return card;
                }
              }));
}

function updateCards(_t, _cards) {
  while(true) {
    var cards = _cards;
    var t = _t;
    if (!cards) {
      return t;
    }
    _cards = cards.tl;
    _t = updateCard(t, cards.hd);
    continue ;
  };
}

function mapAt(t, cursor, fn) {
  return Belt_List.mapWithIndex(t, (function (ind, card) {
                if (ind === cursor) {
                  return Curry._1(fn, card);
                } else {
                  return card;
                }
              }));
}

function getByLevel(t, level) {
  return Belt_List.keep(t, (function (card) {
                return card.level === level;
              }));
}

function getCards(t, iteration) {
  var sliceFirstEmptyLists = function (_lst) {
    while(true) {
      var lst = _lst;
      if (!lst) {
        return lst;
      }
      if (Belt_List.size(lst.hd) !== 0) {
        return lst;
      }
      _lst = lst.tl;
      continue ;
    };
  };
  return Belt_List.reduce(Belt_List.mapWithIndex(sliceFirstEmptyLists(Belt_List.map({
                          hd: /* New */0,
                          tl: {
                            hd: /* Familiar */1,
                            tl: {
                              hd: /* Remember */2,
                              tl: {
                                hd: /* Know */3,
                                tl: /* [] */0
                              }
                            }
                          }
                        }, (function (param) {
                            return getByLevel(t, param);
                          }))), (function (day, cards) {
                    if (Caml_int32.mod_(iteration, day + 1 | 0) === 0) {
                      return cards;
                    } else {
                      return /* [] */0;
                    }
                  })), /* [] */0, Belt_List.concat);
}

var empty = /* [] */0;

var concat = Belt_List.concat;

export {
  empty ,
  make ,
  addCard ,
  updateCard ,
  updateCards ,
  concat ,
  mapAt ,
  getByLevel ,
  getCards ,
  
}
/* No side effect */
